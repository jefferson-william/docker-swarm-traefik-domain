version: '3.7'

services:
  traefik:
    image: traefik:v2.0.7
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dyn-traefik.yml:/etc/traefik/traefik.yml
    networks:
      - world
      - proxy
    deploy:
      replicas: 1
      placement:
        constraints: [node.role==manager]
      restart_policy:
        condition: on-failure

  nginx:
    image: nginx
    networks:
      - world
      - child
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=domain_world
        - traefik.http.routers.nginx.rule=Host(`domain.local`)
        - traefik.http.routers.nginx.entrypoints=web
        - traefik.http.routers.nginx.service=nginx1
        - traefik.http.services.nginx1.loadbalancer.server.port=80
        - traefik.http.services.nginx1.loadbalancer.server.scheme=http
        - traefik.http.services.nginx1.loadbalancer.passhostheader=true
        - traefik.http.services.nginx1.loadbalancer.sticky=true

  whoami:
    image: containous/whoami
    networks:
      - world
      - child
    deploy:
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.lbswarm=true
        - traefik.docker.network=domain_world
        - traefik.http.routers.whoami.rule=Host(`domain.local`) && Path(`/whoami`)
        - traefik.http.routers.whoami.entrypoints=web
        - traefik.http.routers.whoami.service=whoami1
        - traefik.http.services.whoami1.loadbalancer.server.port=80
        - traefik.http.services.whoami1.loadbalancer.server.scheme=http
        - traefik.http.services.whoami1.loadbalancer.passhostheader=true
        - traefik.http.services.whoami1.loadbalancer.sticky=true

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - 9001:8080
    stop_grace_period: 1m30s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints: [node.role==manager]

  agent:
    image: portainer/agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - world
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os==linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - 8000:8000
      - 9000:9000
    stop_grace_period: 1m30s
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - world
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role==manager]

networks:
  world:
    external: true
    attachable: true
    driver: overlay
    name: domain_world
  proxy:
    driver: overlay
    name: domain_proxy
  child:

volumes:
  portainer_data:
